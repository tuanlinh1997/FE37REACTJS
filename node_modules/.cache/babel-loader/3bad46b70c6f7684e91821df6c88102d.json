{"ast":null,"code":"import * as ActionType from \"./../constant/ActionType\";\nlet initialState = {\n  userList: [{\n    id: 1,\n    name: \"Dinh Phuc Nguyen\",\n    username: \"dpnguyen\",\n    email: \"dpnguyen@gmail.com\",\n    phoneNumber: \"1123123213\",\n    type: \"VIP\"\n  }, {\n    id: 2,\n    name: \"Nguyen Dinh Phuc\",\n    username: \"nguyendp\",\n    email: \"nguyendp@gmail.com\",\n    phoneNumber: \"1123123213\",\n    type: \"VIP\"\n  }],\n  userEdit: null,\n  keyword: \"\"\n};\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.DELETE:\n      let index = state.userList.findIndex(item => {\n        return item.id === action.user.id;\n      });\n\n      if (index !== -1) {\n        let userListUpdate = [...state.userList];\n        userListUpdate.splice(index, 1);\n        state.userList = userListUpdate;\n      }\n\n      return { ...state\n      };\n\n    case \"SUBMIT\":\n      if (action.user.id) {\n        //UPDATE\n        let index = state.userList.findIndex(item => {\n          return item.id === action.user.id;\n        });\n\n        if (index !== -1) {\n          let userListUpdate = [...state.userList];\n          userListUpdate[index] = action.user;\n          state.userList = userListUpdate;\n        }\n      } else {\n        //ADD\n        let userAdd = { ...action.user,\n          id: Math.random()\n        };\n        state.userList = [...state.userList, userAdd];\n      }\n\n      return { ...state\n      };\n\n    case ActionType.EDIT:\n      state.userEdit = action.user;\n      return { ...state\n      };\n\n    case \"SEARCH\":\n      state.keyword = action.keyword;\n      return { ...state\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/New folder (3)/src/redux/reducers/userReducer.js"],"names":["ActionType","initialState","userList","id","name","username","email","phoneNumber","type","userEdit","keyword","userReducer","state","action","DELETE","index","findIndex","item","user","userListUpdate","splice","userAdd","Math","random","EDIT"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,0BAA5B;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,kBAFR;AAGEC,IAAAA,QAAQ,EAAE,UAHZ;AAIEC,IAAAA,KAAK,EAAE,oBAJT;AAKEC,IAAAA,WAAW,EAAE,YALf;AAMEC,IAAAA,IAAI,EAAE;AANR,GADQ,EASR;AACEL,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,kBAFR;AAGEC,IAAAA,QAAQ,EAAE,UAHZ;AAIEC,IAAAA,KAAK,EAAE,oBAJT;AAKEC,IAAAA,WAAW,EAAE,YALf;AAMEC,IAAAA,IAAI,EAAE;AANR,GATQ,CADO;AAmBjBC,EAAAA,QAAQ,EAAE,IAnBO;AAoBjBC,EAAAA,OAAO,EAAE;AApBQ,CAAnB;;AAuBA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACL,IAAf;AACE,SAAKR,UAAU,CAACc,MAAhB;AACE,UAAIC,KAAK,GAAGH,KAAK,CAACV,QAAN,CAAec,SAAf,CAAyBC,IAAI,IAAI;AAC3C,eAAOA,IAAI,CAACd,EAAL,KAAYU,MAAM,CAACK,IAAP,CAAYf,EAA/B;AACD,OAFW,CAAZ;;AAGA,UAAIY,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,YAAII,cAAc,GAAG,CAAC,GAAGP,KAAK,CAACV,QAAV,CAArB;AACAiB,QAAAA,cAAc,CAACC,MAAf,CAAsBL,KAAtB,EAA6B,CAA7B;AACAH,QAAAA,KAAK,CAACV,QAAN,GAAiBiB,cAAjB;AACD;;AACD,aAAO,EAAE,GAAGP;AAAL,OAAP;;AACF,SAAK,QAAL;AACE,UAAIC,MAAM,CAACK,IAAP,CAAYf,EAAhB,EAAoB;AAClB;AACA,YAAIY,KAAK,GAAGH,KAAK,CAACV,QAAN,CAAec,SAAf,CAAyBC,IAAI,IAAI;AAC3C,iBAAOA,IAAI,CAACd,EAAL,KAAYU,MAAM,CAACK,IAAP,CAAYf,EAA/B;AACD,SAFW,CAAZ;;AAGA,YAAIY,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,cAAII,cAAc,GAAG,CAAC,GAAGP,KAAK,CAACV,QAAV,CAArB;AACAiB,UAAAA,cAAc,CAACJ,KAAD,CAAd,GAAwBF,MAAM,CAACK,IAA/B;AACAN,UAAAA,KAAK,CAACV,QAAN,GAAiBiB,cAAjB;AACD;AACF,OAVD,MAUO;AACL;AACA,YAAIE,OAAO,GAAG,EAAE,GAAGR,MAAM,CAACK,IAAZ;AAAkBf,UAAAA,EAAE,EAAEmB,IAAI,CAACC,MAAL;AAAtB,SAAd;AACAX,QAAAA,KAAK,CAACV,QAAN,GAAiB,CAAC,GAAGU,KAAK,CAACV,QAAV,EAAoBmB,OAApB,CAAjB;AACD;;AAED,aAAO,EAAE,GAAGT;AAAL,OAAP;;AAEF,SAAKZ,UAAU,CAACwB,IAAhB;AACEZ,MAAAA,KAAK,CAACH,QAAN,GAAiBI,MAAM,CAACK,IAAxB;AACA,aAAO,EAAE,GAAGN;AAAL,OAAP;;AAEF,SAAK,QAAL;AACEA,MAAAA,KAAK,CAACF,OAAN,GAAgBG,MAAM,CAACH,OAAvB;AACA,aAAO,EAAE,GAAGE;AAAL,OAAP;;AAEF;AACE,aAAO,EAAE,GAAGA;AAAL,OAAP;AAvCJ;AAyCD,CA1CD;;AA4CA,eAAeD,WAAf","sourcesContent":["import * as ActionType from \"./../constant/ActionType\";\n\nlet initialState = {\n  userList: [\n    {\n      id: 1,\n      name: \"Dinh Phuc Nguyen\",\n      username: \"dpnguyen\",\n      email: \"dpnguyen@gmail.com\",\n      phoneNumber: \"1123123213\",\n      type: \"VIP\"\n    },\n    {\n      id: 2,\n      name: \"Nguyen Dinh Phuc\",\n      username: \"nguyendp\",\n      email: \"nguyendp@gmail.com\",\n      phoneNumber: \"1123123213\",\n      type: \"VIP\"\n    }\n  ],\n  userEdit: null,\n  keyword: \"\"\n};\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.DELETE:\n      let index = state.userList.findIndex(item => {\n        return item.id === action.user.id;\n      });\n      if (index !== -1) {\n        let userListUpdate = [...state.userList];\n        userListUpdate.splice(index, 1);\n        state.userList = userListUpdate;\n      }\n      return { ...state };\n    case \"SUBMIT\":\n      if (action.user.id) {\n        //UPDATE\n        let index = state.userList.findIndex(item => {\n          return item.id === action.user.id;\n        });\n        if (index !== -1) {\n          let userListUpdate = [...state.userList];\n          userListUpdate[index] = action.user;\n          state.userList = userListUpdate;\n        }\n      } else {\n        //ADD\n        let userAdd = { ...action.user, id: Math.random() };\n        state.userList = [...state.userList, userAdd];\n      }\n\n      return { ...state };\n\n    case ActionType.EDIT:\n      state.userEdit = action.user;\n      return { ...state };\n\n    case \"SEARCH\":\n      state.keyword = action.keyword;\n      return { ...state };\n\n    default:\n      return { ...state };\n  }\n};\n\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}